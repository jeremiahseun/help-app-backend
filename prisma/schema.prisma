// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  password         String
  role             Role      @default(CLIENT)
  reviews          Review[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  // Bookings where user is the client
  clientBookings   Booking[] @relation("ClientBookings")
  // Bookings where user is the provider
  providerBookings Booking[] @relation("ProviderBookings")
}

model Service {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Booking {
  id          Int      @id @default(autoincrement())
  client      User     @relation("ClientBookings", fields: [clientId], references: [id])
  clientId    Int
  provider    User     @relation("ProviderBookings", fields: [providerId], references: [id])
  providerId  Int
  service     Service  @relation(fields: [serviceId], references: [id])
  serviceId   Int
  status      Status   @default(PENDING)
  requestedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  review      Review?
}

model Review {
  id        Int      @id @default(autoincrement())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId Int      @unique
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

enum Role {
  CLIENT
  PROVIDER
  ADMIN
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}
