// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  PROVIDER
  ADMIN
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      UserRole
  // relations
  servicesAsProvider  Service[]  @relation("ProviderServices")
  bookingsAsClient    Booking[]  @relation("ClientBookings")
  bookingsAsProvider  Booking[]  @relation("ProviderBookings")
  reviews             Review[]
  tokens              AuthToken[]
  // timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  providers   User[]    @relation("ProviderServices")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Booking {
  id          Int           @id @default(autoincrement())
  client      User          @relation("ClientBookings", fields: [clientId], references: [id])
  clientId    Int
  provider    User          @relation("ProviderBookings", fields: [providerId], references: [id])
  providerId  Int
  service     Service       @relation(fields: [serviceId], references: [id])
  serviceId   Int
  status      BookingStatus @default(PENDING)
  scheduledAt DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Review {
  id         Int      @id @default(autoincrement())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  bookingId  Int      @unique
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
}

model AuthToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now())
}
